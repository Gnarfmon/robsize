Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.10.0 Build 20230609_000000

Compiler options: -Wl,-rpath,/apps/SPACK/0.19.1/opt/linux-almalinux8-icelake/gcc-8.5.0/intel-oneapi-compilers-2023.2.1-axze7ocbc5zpklxb6kr5h2d5hbpf2lxk/compiler/2023.2.1/linux/lib -Wl,-rpath,/apps/SPACK/0.19.1/opt/linux-almalinux8-icelake/gcc-8.5.0/intel-oneapi-compilers-2023.2.1-axze7ocbc5zpklxb6kr5h2d5hbpf2lxk/compiler/2023.2.1/linux/lib/x64 -Wl,-rpath,/apps/SPACK/0.19.1/opt/linux-almalinux8-icelake/gcc-8.5.0/intel-oneapi-compilers-2023.2.1-axze7ocbc5zpklxb6kr5h2d5hbpf2lxk/compiler/2023.2.1/linux/lib/oclfpga/host/linux64/lib -Wl,-rpath,/apps/SPACK/0.19.1/opt/linux-almalinux8-icelake/gcc-8.5.0/intel-oneapi-compilers-2023.2.1-axze7ocbc5zpklxb6kr5h2d5hbpf2lxk/compiler/2023.2.1/linux/lib/oclfpga/linux64/lib -Wl,-rpath,/apps/SPACK/0.19.1/opt/linux-almalinux8-icelake/gcc-8.5.0/intel-oneapi-compilers-2023.2.1-axze7ocbc5zpklxb6kr5h2d5hbpf2lxk/compiler/2023.2.1/linux/compiler/lib/intel64_lin -gcc-name=/usr/bin/gcc -gxx-name=/usr/bin/g++ -Ofast -qopenmp-simd -xHost -qopt-zmm-usage=low -fargument-noalias -funroll-loops -fno-builtin -diag-disable=all -qopt-report=5 -qopt-report-file=./tmp_multiarray/spr/multiarray_spr3.optrpt -o ./tmp_multiarray/spr/multiarray_spr3

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/10=10.0%] ./tmp_multiarray/spr/multiarray_spr.cpp(9,33)
  -> EXTERN: (23,12) operator new[](unsigned long)
  -> EXTERN: (24,12) operator new[](unsigned long)
  -> EXTERN: (25,12) operator new[](unsigned long)
  -> EXTERN: (26,12) operator new[](unsigned long)
  -> INLINE: (64,17) getTimeStamp() (isz = 8) (sz = 13)
    -> EXTERN: /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp:(6,3) clock_gettime(clockid_t, timespec *)
  -> INLINE: (88,15) getTimeStamp() (isz = 8) (sz = 13)
    -> EXTERN: /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp:(6,3) clock_gettime(clockid_t, timespec *)
  -> EXTERN: (96,16) printf(const char *, ...)
  -> EXTERN: (98,3) printf(const char *, ...)
  -> EXTERN: (99,3) operator delete[](void *)
  -> EXTERN: (100,1) operator delete[](void *)
  -> EXTERN: (101,1) operator delete[](void *)
  -> EXTERN: (102,1) operator delete[](void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ./tmp_multiarray/spr/multiarray_spr.cpp(30,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ./tmp_multiarray/spr/multiarray_spr.cpp(31,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at ./tmp_multiarray/spr/multiarray_spr.cpp(31,5)
      remark #15389: vectorization support: reference phi[i][k] has unaligned access   [ ./tmp_multiarray/spr/multiarray_spr.cpp(32,7) ]
      remark #15389: vectorization support: reference phi_3[i][k] has unaligned access   [ ./tmp_multiarray/spr/multiarray_spr.cpp(33,1) ]
      remark #15389: vectorization support: reference phi_2[i][k] has unaligned access   [ ./tmp_multiarray/spr/multiarray_spr.cpp(34,1) ]
      remark #15388: vectorization support: reference phi_1[i][k] has aligned access   [ ./tmp_multiarray/spr/multiarray_spr.cpp(35,1) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.264
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 12 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 2.400 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at ./tmp_multiarray/spr/multiarray_spr.cpp(31,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference phi[i][k] has unaligned access   [ ./tmp_multiarray/spr/multiarray_spr.cpp(32,7) ]
      remark #15389: vectorization support: reference phi_3[i][k] has unaligned access   [ ./tmp_multiarray/spr/multiarray_spr.cpp(33,1) ]
      remark #15389: vectorization support: reference phi_2[i][k] has unaligned access   [ ./tmp_multiarray/spr/multiarray_spr.cpp(34,1) ]
      remark #15389: vectorization support: reference phi_1[i][k] has unaligned access   [ ./tmp_multiarray/spr/multiarray_spr.cpp(35,1) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.100
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
   LOOP END

   LOOP BEGIN at ./tmp_multiarray/spr/multiarray_spr.cpp(31,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ./tmp_multiarray/spr/multiarray_spr.cpp(38,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15416: vectorization support: non-unit strided store was generated for the variable <phi[i][0]>, masked, stride is 100   [ ./tmp_multiarray/spr/multiarray_spr.cpp(40,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <phi[i][99]>, masked, stride is 100   [ ./tmp_multiarray/spr/multiarray_spr.cpp(39,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <phi_3[i][0]>, masked, stride is 100   [ ./tmp_multiarray/spr/multiarray_spr.cpp(42,2) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <phi_3[i][99]>, masked, stride is 100   [ ./tmp_multiarray/spr/multiarray_spr.cpp(41,1) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <phi_2[i][0]>, masked, stride is 100   [ ./tmp_multiarray/spr/multiarray_spr.cpp(44,2) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <phi_2[i][99]>, masked, stride is 100   [ ./tmp_multiarray/spr/multiarray_spr.cpp(43,1) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <phi_1[i][0]>, masked, stride is 100   [ ./tmp_multiarray/spr/multiarray_spr.cpp(46,2) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <phi_1[i][99]>, masked, stride is 100   [ ./tmp_multiarray/spr/multiarray_spr.cpp(45,1) ]
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15462: unmasked indexed (or gather) loads: 8 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 25 
   remark #15477: vector cost: 36.250 
   remark #15478: estimated potential speedup: 0.510 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ./tmp_multiarray/spr/multiarray_spr.cpp(48,3)
   remark #25427: Loop Statements Reordered
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between phi_1[k] (55:1) and ((phi_1+1600))[k] (56:2)
   remark #15346: vector dependence: assumed OUTPUT dependence between ((phi_1+1600))[k] (56:2) and phi_1[k] (55:1)
LOOP END

LOOP BEGIN at ./tmp_multiarray/spr/multiarray_spr.cpp(60,13)
   remark #15523: loop was not vectorized: loop control variable dummy was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at ./tmp_multiarray/spr/multiarray_spr.cpp(66,5)
   <Distributed chunk1>
      remark #25426: Loop Distributed (2 way) 
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between ((phi+800))[k] (71:15) and ((phi+800))[k] (71:15)
      remark #15346: vector dependence: assumed OUTPUT dependence between ((phi+800))[k] (71:15) and ((phi+800))[k] (71:15)

      LOOP BEGIN at ./tmp_multiarray/spr/multiarray_spr.cpp(70,11)
      <Distributed chunk1>
         remark #25426: Loop Distributed (2 way) 
         remark #25428: Distributed for large ii at line 70   [ ./tmp_multiarray/spr/multiarray_spr.cpp(70,11) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between ((phi+800))[k] (71:15) and ((phi+800))[k-1] (71:15)
         remark #15346: vector dependence: assumed ANTI dependence between ((phi+800))[k-1] (71:15) and ((phi+800))[k] (71:15)
      LOOP END
   LOOP END

   LOOP BEGIN at ./tmp_multiarray/spr/multiarray_spr.cpp(66,5)
   <Distributed chunk2>
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25452: Original Order found to be proper, but by a close margin
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between dummy (68:17) and dummy (79:3)
      remark #15346: vector dependence: assumed FLOW dependence between dummy (79:3) and dummy (68:17)
      remark #15346: vector dependence: assumed FLOW dependence between dummy (79:3) and dummy (68:17)
      remark #15346: vector dependence: assumed ANTI dependence between dummy (68:17) and dummy (79:3)

      LOOP BEGIN at ./tmp_multiarray/spr/multiarray_spr.cpp(70,11)
      <Distributed chunk2>
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 1 
         remark #15477: vector cost: 0.500 
         remark #15478: estimated potential speedup: 1.960 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

./tmp_multiarray/spr/multiarray_spr.cpp(9,33):remark #34051: REGISTER ALLOCATION : [main] ./tmp_multiarray/spr/multiarray_spr.cpp:9

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   35[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm20]
        
    Routine temporaries
        Total         :     121
            Global    :      46
            Local     :      75
        Regenerable   :      27
        Spilled       :      11
        
    Routine stack
        Variables     :      36 bytes*
            Reads     :       8 [2.71e-02 ~ 0.0%]
            Writes    :       2 [2.26e-03 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :      10 [2.43e-02 ~ 0.0%]
            Writes    :       9 [1.38e-02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: atoi(const char *)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (atoi(const char *))/usr/include/stdlib.h(362,1)

===========================================================================

Begin optimization report for: getTimeStamp()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (getTimeStamp()) [3/10=30.0%] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp(4,1)
  -> EXTERN: (6,3) clock_gettime(clockid_t, timespec *)


    Report from: Code generation optimizations [cg]

/home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp(4,1):remark #34051: REGISTER ALLOCATION : [_Z12getTimeStampv] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp:4

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      13
            Global    :       6
            Local     :       7
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [9.52e+00 ~ 9.5%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: getTimeResolution()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (getTimeResolution()) [4/10=40.0%] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp(11,1)
  -> EXTERN: (13,3) clock_getres(clockid_t, timespec *)


    Report from: Code generation optimizations [cg]

/home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp(11,1):remark #34051: REGISTER ALLOCATION : [_Z17getTimeResolutionv] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp:11

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      13
            Global    :       6
            Local     :       7
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [9.52e+00 ~ 9.5%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: getTimeStamp_()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (getTimeStamp_()) [5/10=50.0%] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp(18,1)
  -> INLINE: (19,10) getTimeStamp() (isz = 8) (sz = 13)
    -> EXTERN: (6,3) clock_gettime(clockid_t, timespec *)


    Report from: Code generation optimizations [cg]

/home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp(18,1):remark #34051: REGISTER ALLOCATION : [_Z13getTimeStamp_v] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp:18

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      13
            Global    :       6
            Local     :       7
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [9.52e+00 ~ 9.5%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: gettimestamp_()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (gettimestamp_()) [6/10=60.0%] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp(23,1)
  -> INLINE: (24,10) getTimeStamp() (isz = 8) (sz = 13)
    -> EXTERN: (6,3) clock_gettime(clockid_t, timespec *)


    Report from: Code generation optimizations [cg]

/home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp(23,1):remark #34051: REGISTER ALLOCATION : [_Z13gettimestamp_v] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp:23

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      13
            Global    :       6
            Local     :       7
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [9.52e+00 ~ 9.5%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dummy(double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dummy(double *)) [7/10=70.0%] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp(27,23)


    Report from: Code generation optimizations [cg]

/home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp(27,23):remark #34051: REGISTER ALLOCATION : [_Z5dummyPd] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/timing.cpp:27

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: perf_event_open(perf_event_attr *, pid_t, int, int, unsigned long)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (perf_event_open(perf_event_attr *, pid_t, int, int, unsigned long)) /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/perfctr.cpp(10,118)

===========================================================================

Begin optimization report for: perfevent_paranoid_value()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (perfevent_paranoid_value()) [9/10=90.0%] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/perfctr.cpp(36,1)
  -> EXTERN: (40,10) fopen(const char *, const char *)
  -> EXTERN: (43,9) __errno_location()
  -> EXTERN: (44,9) fprintf(FILE *, const char *, ...)
  -> EXTERN: (44,130) __errno_location()
  -> EXTERN: (47,19) fread(void *, size_t, size_t, FILE *)
  -> INLINE (MANUAL): (50,20) atoi(const char *) (isz = 7) (sz = 14)
    -> EXTERN: /usr/include/stdlib.h:(363,16) strtol(const char *, char **, int)
  -> EXTERN: (52,5) fclose(FILE *)


    Report from: Code generation optimizations [cg]

/home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/perfctr.cpp(36,1):remark #34051: REGISTER ALLOCATION : [_Z24perfevent_paranoid_valuev] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/perfctr.cpp:36

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rbx rbp rsi rdi]
        
    Routine temporaries
        Total         :      39
            Global    :      16
            Local     :      23
        Regenerable   :      15
        Spilled       :       2
        
    Routine stack
        Variables     :     100 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: init_perf_event(perf_event_attr *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (init_perf_event(perf_event_attr *)) [10/10=100.0%] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/perfctr.cpp(19,1)
  -> EXTERN: (20,5) memset(void *, int, size_t)
  -> INLINE: (27,19) perf_event_open(perf_event_attr *, pid_t, int, int, unsigned long) (isz = 4) (sz = 19)
    -> EXTERN: (13,11) syscall(long, ...)
  -> EXTERN: (29,9) fprintf(FILE *, const char *, ...)
  -> EXTERN: (30,9) exit(int)


    Report from: Code generation optimizations [cg]

/home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/perfctr.cpp(19,1):remark #34051: REGISTER ALLOCATION : [_Z15init_perf_eventP15perf_event_attr] /home/hpc/muco/muco124h/Bachelor/other/ce_project/dep/perfctr.cpp:19

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 r15]
        
    Routine temporaries
        Total         :      29
            Global    :      10
            Local     :      19
        Regenerable   :      12
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
